#ifndef __std_process_included
#define __std_process_included

#include <functional>
#include <cstdlib>
#include <cerrno>

#include <bits/gen_all.h>
#include <bits/gen_process.h>
#include <bits/gen_hash.h>
#if defined(__unix__)
#include <bits/posix_all.h>
#include <bits/posix_process.h>
#endif

namespace std {

	enum struct terminate_flag
	{ 
		terminate_none, 
		terminate_child, 
		terminate_parent, 
		terminate_both 
	};

	class process
	{
	public:
		class id
		{
		public:
			typedef __bits::__process_impl<__itag>::native_handle_type native_handle_type;

			id() = default;
			explicit id(native_handle_type __h) : _M_process(__h)
			{ }

			friend bool operator==(process::id __a, process::id __b);
			friend bool operator!=(process::id __a, process::id __b);
			friend bool operator<(process::id __a, process::id __b);
			friend bool operator>(process::id __a, process::id __b);
			friend bool operator>=(process::id __a, process::id __b);
			friend bool operator<=(process::id __a, process::id __b);

			template<class _CharT, class _Traits>
			friend basic_ostream<_CharT, _Traits>&
			operator<<(basic_ostream<_CharT, _Traits>& __out, process::id __id);
		private:
			native_handle_type _M_process;

			friend class process;
		};

	private:
		process::id _M_id;
		
		template <class _Callable>
		void embbed(_Callable __callable)
		{
			__callable();
		}

		void do_exit() const noexcept
		{ exit(0); }

		bool shall_terminate_parent(terminate_flag __tf) const noexcept
		{
			return (__tf == terminate_flag::terminate_parent) || 
				(__tf == terminate_flag::terminate_both);
		}

		bool shall_terminate_child(terminate_flag __tf) const noexcept
		{
			return (__tf == terminate_flag::terminate_child) || 
				(__tf == terminate_flag::terminate_both);
		}

	public:
		typedef id::native_handle_type native_handle_type;

		process(process&) = delete;
		process(const process&) = delete;
		process& operator=(const process&) = delete;

		process() = default;

		template <typename _F, typename... _Args>
		explicit process(terminate_flag __tf, _F&& __f, _Args&&... __args)
		{
			auto __callable = bind(forward<_F>(__f), forward<_Args>(__args)...);
			native_handle_type __h = __bits::__process_impl<__itag>::fork();
			if (__h == 0) {
				embbed(__callable);
				if (shall_terminate_child(__tf))
					do_exit();
			} else if (__h < 0) {
				__bits::__throw(errc::resource_unavailable_try_again,
					"failed to fork() the process");
			} else {
				if (shall_terminate_parent(__tf))
					do_exit();
				_M_id = process::id(__h);
			}
		}
		
		template <typename _F, typename... _Args>
		explicit process(_F&& __f, _Args&&... __args)
		: process(terminate_flag::terminate_child, __f, __args...)
		{ }

		process(process&& __p) noexcept
		{ swap(__p); }

		~process()
		{
			if (joinable())
				terminate();
		}

		process& operator=(process&& __p) noexcept
		{
			if (joinable())
				terminate();
			swap(__p);
			return *this;
		}

		void swap(process& __p) noexcept;

		void detach()
		{
			if (!joinable())
				__bits::__throw(EINVAL, "cannot detach() detached process");
			_M_id = process::id();
		}

		void join()
		{
			int __r = EINVAL;
			if (joinable())
				__r = __bits::__process_impl<__itag>::join(_M_id._M_process);
			if (__r)
				__bits::__throw(__r, "failed to join() process");
			_M_id = process::id();
		}

		bool joinable()
		{
			return !(_M_id == process::id());
		}

		native_handle_type native_handle() const noexcept
		{ return _M_id._M_process; }

		process::id get_id() const noexcept
		{ return _M_id; }
	};

	namespace this_process {
		inline process::id get_id()
		{
			process::native_handle_type h;
			h = __bits::__process_impl<__itag>::fetch_native_handle();
			return process::id(h);
		}

		template <typename... _Args>
		void exec(const string& __cmd, _Args&&... __args)
		{
			int __e = __bits::__process_impl<__itag>::exec(__cmd, __args...);
			__bits::__throw(__e, "failed to exec() command");
		}
	}

	template<class _CharT, class _Traits>
	inline basic_ostream<_CharT, _Traits>&
	operator<<(basic_ostream<_CharT, _Traits>& __out, process::id __id)
	{
		if (__id == process::id())
			return __out << "process::id of a non-executing process";
		else
			return __out << __id._M_process;
	}

	// process::id operators
	inline bool operator==(process::id __a, process::id __b)
	{
		return __a._M_process == __b._M_process;
	}

	inline bool operator!=(process::id __a, process::id __b)
	{
		return !(__a._M_process == __b._M_process);
	}

	inline bool operator<=(process::id __a, process::id __b)
	{
		return !(__b._M_process < __b._M_process);
	}

	inline bool operator>=(process::id __a, process::id __b)
	{
		return !(__a._M_process < __b._M_process);
	}

	inline bool operator<(process::id __a, process::id __b)
	{
		return __a._M_process < __b._M_process;
	}

	inline bool operator>(process::id __a, process::id __b)
	{
		return __b._M_process < __a._M_process;
	}

	template <>
	struct hash<process::id>
	{
		size_t operator()(process::id __id) const noexcept
		{ return __bits::__fnv1_hash_bytes()(&__id, sizeof(__id)); }
	};
}

#endif // __std_process_included
